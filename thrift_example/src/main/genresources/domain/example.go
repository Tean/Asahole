// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package domain

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - DomainBool
//  - DomainByte
//  - DomainI16
//  - DomainI32
//  - DomainI64
//  - DomainDouble
//  - DomainString
//  - DomainBinary
//  - DomainStruct
type ExpDomain struct {
  DomainBool *bool `thrift:"domainBool,1" db:"domainBool" json:"domainBool,omitempty"`
  DomainByte int8 `thrift:"domainByte,2,required" db:"domainByte" json:"domainByte"`
  DomainI16 *int16 `thrift:"domainI16,3" db:"domainI16" json:"domainI16,omitempty"`
  DomainI32 *int32 `thrift:"domainI32,4" db:"domainI32" json:"domainI32,omitempty"`
  DomainI64 *int64 `thrift:"domainI64,5" db:"domainI64" json:"domainI64,omitempty"`
  DomainDouble *float64 `thrift:"domainDouble,6" db:"domainDouble" json:"domainDouble,omitempty"`
  DomainString *string `thrift:"domainString,7" db:"domainString" json:"domainString,omitempty"`
  DomainBinary []byte `thrift:"domainBinary,8" db:"domainBinary" json:"domainBinary,omitempty"`
  DomainStruct *ExpStruct `thrift:"domainStruct,9" db:"domainStruct" json:"domainStruct,omitempty"`
}

func NewExpDomain() *ExpDomain {
  return &ExpDomain{}
}

var ExpDomain_DomainBool_DEFAULT bool
func (p *ExpDomain) GetDomainBool() bool {
  if !p.IsSetDomainBool() {
    return ExpDomain_DomainBool_DEFAULT
  }
return *p.DomainBool
}

func (p *ExpDomain) GetDomainByte() int8 {
  return p.DomainByte
}
var ExpDomain_DomainI16_DEFAULT int16
func (p *ExpDomain) GetDomainI16() int16 {
  if !p.IsSetDomainI16() {
    return ExpDomain_DomainI16_DEFAULT
  }
return *p.DomainI16
}
var ExpDomain_DomainI32_DEFAULT int32
func (p *ExpDomain) GetDomainI32() int32 {
  if !p.IsSetDomainI32() {
    return ExpDomain_DomainI32_DEFAULT
  }
return *p.DomainI32
}
var ExpDomain_DomainI64_DEFAULT int64
func (p *ExpDomain) GetDomainI64() int64 {
  if !p.IsSetDomainI64() {
    return ExpDomain_DomainI64_DEFAULT
  }
return *p.DomainI64
}
var ExpDomain_DomainDouble_DEFAULT float64
func (p *ExpDomain) GetDomainDouble() float64 {
  if !p.IsSetDomainDouble() {
    return ExpDomain_DomainDouble_DEFAULT
  }
return *p.DomainDouble
}
var ExpDomain_DomainString_DEFAULT string
func (p *ExpDomain) GetDomainString() string {
  if !p.IsSetDomainString() {
    return ExpDomain_DomainString_DEFAULT
  }
return *p.DomainString
}
var ExpDomain_DomainBinary_DEFAULT []byte

func (p *ExpDomain) GetDomainBinary() []byte {
  return p.DomainBinary
}
var ExpDomain_DomainStruct_DEFAULT *ExpStruct
func (p *ExpDomain) GetDomainStruct() *ExpStruct {
  if !p.IsSetDomainStruct() {
    return ExpDomain_DomainStruct_DEFAULT
  }
return p.DomainStruct
}
func (p *ExpDomain) IsSetDomainBool() bool {
  return p.DomainBool != nil
}

func (p *ExpDomain) IsSetDomainI16() bool {
  return p.DomainI16 != nil
}

func (p *ExpDomain) IsSetDomainI32() bool {
  return p.DomainI32 != nil
}

func (p *ExpDomain) IsSetDomainI64() bool {
  return p.DomainI64 != nil
}

func (p *ExpDomain) IsSetDomainDouble() bool {
  return p.DomainDouble != nil
}

func (p *ExpDomain) IsSetDomainString() bool {
  return p.DomainString != nil
}

func (p *ExpDomain) IsSetDomainBinary() bool {
  return p.DomainBinary != nil
}

func (p *ExpDomain) IsSetDomainStruct() bool {
  return p.DomainStruct != nil
}

func (p *ExpDomain) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDomainByte bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetDomainByte = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDomainByte{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DomainByte is not set"));
  }
  return nil
}

func (p *ExpDomain)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DomainBool = &v
}
  return nil
}

func (p *ExpDomain)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.DomainByte = temp
}
  return nil
}

func (p *ExpDomain)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DomainI16 = &v
}
  return nil
}

func (p *ExpDomain)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DomainI32 = &v
}
  return nil
}

func (p *ExpDomain)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DomainI64 = &v
}
  return nil
}

func (p *ExpDomain)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DomainDouble = &v
}
  return nil
}

func (p *ExpDomain)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DomainString = &v
}
  return nil
}

func (p *ExpDomain)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.DomainBinary = v
}
  return nil
}

func (p *ExpDomain)  ReadField9(iprot thrift.TProtocol) error {
  p.DomainStruct = &ExpStruct{}
  if err := p.DomainStruct.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DomainStruct), err)
  }
  return nil
}

func (p *ExpDomain) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExpDomain"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExpDomain) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainBool() {
    if err := oprot.WriteFieldBegin("domainBool", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domainBool: ", p), err) }
    if err := oprot.WriteBool(bool(*p.DomainBool)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainBool (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domainBool: ", p), err) }
  }
  return err
}

func (p *ExpDomain) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("domainByte", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domainByte: ", p), err) }
  if err := oprot.WriteByte(int8(p.DomainByte)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.domainByte (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domainByte: ", p), err) }
  return err
}

func (p *ExpDomain) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainI16() {
    if err := oprot.WriteFieldBegin("domainI16", thrift.I16, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:domainI16: ", p), err) }
    if err := oprot.WriteI16(int16(*p.DomainI16)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainI16 (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:domainI16: ", p), err) }
  }
  return err
}

func (p *ExpDomain) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainI32() {
    if err := oprot.WriteFieldBegin("domainI32", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:domainI32: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DomainI32)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainI32 (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:domainI32: ", p), err) }
  }
  return err
}

func (p *ExpDomain) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainI64() {
    if err := oprot.WriteFieldBegin("domainI64", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:domainI64: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DomainI64)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainI64 (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:domainI64: ", p), err) }
  }
  return err
}

func (p *ExpDomain) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainDouble() {
    if err := oprot.WriteFieldBegin("domainDouble", thrift.DOUBLE, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:domainDouble: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.DomainDouble)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainDouble (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:domainDouble: ", p), err) }
  }
  return err
}

func (p *ExpDomain) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainString() {
    if err := oprot.WriteFieldBegin("domainString", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:domainString: ", p), err) }
    if err := oprot.WriteString(string(*p.DomainString)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainString (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:domainString: ", p), err) }
  }
  return err
}

func (p *ExpDomain) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainBinary() {
    if err := oprot.WriteFieldBegin("domainBinary", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:domainBinary: ", p), err) }
    if err := oprot.WriteBinary(p.DomainBinary); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domainBinary (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:domainBinary: ", p), err) }
  }
  return err
}

func (p *ExpDomain) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainStruct() {
    if err := oprot.WriteFieldBegin("domainStruct", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:domainStruct: ", p), err) }
    if err := p.DomainStruct.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DomainStruct), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:domainStruct: ", p), err) }
  }
  return err
}

func (p *ExpDomain) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExpDomain(%+v)", *p)
}

// Attributes:
//  - Usermap
//  - Intset
//  - Doublelist
type ExpStruct struct {
  Usermap map[string]*User `thrift:"usermap,1" db:"usermap" json:"usermap"`
  Intset []int32 `thrift:"intset,2" db:"intset" json:"intset"`
  Doublelist []float64 `thrift:"doublelist,3" db:"doublelist" json:"doublelist"`
}

func NewExpStruct() *ExpStruct {
  return &ExpStruct{}
}


func (p *ExpStruct) GetUsermap() map[string]*User {
  return p.Usermap
}

func (p *ExpStruct) GetIntset() []int32 {
  return p.Intset
}

func (p *ExpStruct) GetDoublelist() []float64 {
  return p.Doublelist
}
func (p *ExpStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExpStruct)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*User, size)
  p.Usermap =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
    _val1 := &User{}
    if err := _val1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val1), err)
    }
    p.Usermap[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ExpStruct)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int32, 0, size)
  p.Intset =  tSet
  for i := 0; i < size; i ++ {
var _elem2 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Intset = append(p.Intset, _elem2)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *ExpStruct)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.Doublelist =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Doublelist = append(p.Doublelist, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExpStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExpStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExpStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("usermap", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:usermap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Usermap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Usermap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:usermap: ", p), err) }
  return err
}

func (p *ExpStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("intset", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:intset: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.Intset)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Intset); i++ {
    for j := i+1; j<len(p.Intset); j++ {
      if reflect.DeepEqual(p.Intset[i],p.Intset[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Intset[i]))
      }
    }
  }
  for _, v := range p.Intset {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:intset: ", p), err) }
  return err
}

func (p *ExpStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("doublelist", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:doublelist: ", p), err) }
  if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.Doublelist)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Doublelist {
    if err := oprot.WriteDouble(float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:doublelist: ", p), err) }
  return err
}

func (p *ExpStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExpStruct(%+v)", *p)
}

// Attributes:
//  - Name
//  - Number
type User struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Number int16 `thrift:"number,2,required" db:"number" json:"number"`
}

func NewUser() *User {
  return &User{}
}


func (p *User) GetName() string {
  return p.Name
}

func (p *User) GetNumber() int16 {
  return p.Number
}
func (p *User) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNumber bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetNumber = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNumber{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Number is not set"));
  }
  return nil
}

func (p *User)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *User)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Number = v
}
  return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("number", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:number: ", p), err) }
  if err := oprot.WriteI16(int16(p.Number)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.number (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:number: ", p), err) }
  return err
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

type HelloService interface {
  // Parameters:
  //  - Param
  Question(ctx context.Context, param string) (r int32, err error)
  Answer(ctx context.Context) (r *ExpDomain, err error)
}

type HelloServiceClient struct {
  c thrift.TClient
}

func NewHelloServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HelloServiceClient {
  return &HelloServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewHelloServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HelloServiceClient {
  return &HelloServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewHelloServiceClient(c thrift.TClient) *HelloServiceClient {
  return &HelloServiceClient{
    c: c,
  }
}

func (p *HelloServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Param
func (p *HelloServiceClient) Question(ctx context.Context, param string) (r int32, err error) {
  var _args4 HelloServiceQuestionArgs
  _args4.Param = param
  var _result5 HelloServiceQuestionResult
  if err = p.Client_().Call(ctx, "question", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

func (p *HelloServiceClient) Answer(ctx context.Context) (r *ExpDomain, err error) {
  var _args6 HelloServiceAnswerArgs
  var _result7 HelloServiceAnswerResult
  if err = p.Client_().Call(ctx, "answer", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

type HelloServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler HelloService
}

func (p *HelloServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HelloServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *HelloServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHelloServiceProcessor(handler HelloService) *HelloServiceProcessor {

  self8 := &HelloServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["question"] = &helloServiceProcessorQuestion{handler:handler}
  self8.processorMap["answer"] = &helloServiceProcessorAnswer{handler:handler}
return self8
}

func (p *HelloServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x9

}

type helloServiceProcessorQuestion struct {
  handler HelloService
}

func (p *helloServiceProcessorQuestion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HelloServiceQuestionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("question", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HelloServiceQuestionResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.Question(ctx, args.Param); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing question: " + err2.Error())
    oprot.WriteMessageBegin("question", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("question", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type helloServiceProcessorAnswer struct {
  handler HelloService
}

func (p *helloServiceProcessorAnswer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HelloServiceAnswerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("answer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HelloServiceAnswerResult{}
var retval *ExpDomain
  var err2 error
  if retval, err2 = p.handler.Answer(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing answer: " + err2.Error())
    oprot.WriteMessageBegin("answer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("answer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Param
type HelloServiceQuestionArgs struct {
  Param string `thrift:"param,1" db:"param" json:"param"`
}

func NewHelloServiceQuestionArgs() *HelloServiceQuestionArgs {
  return &HelloServiceQuestionArgs{}
}


func (p *HelloServiceQuestionArgs) GetParam() string {
  return p.Param
}
func (p *HelloServiceQuestionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HelloServiceQuestionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Param = v
}
  return nil
}

func (p *HelloServiceQuestionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HelloServiceQuestionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:param: ", p), err) }
  if err := oprot.WriteString(string(p.Param)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:param: ", p), err) }
  return err
}

func (p *HelloServiceQuestionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HelloServiceQuestionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HelloServiceQuestionResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHelloServiceQuestionResult() *HelloServiceQuestionResult {
  return &HelloServiceQuestionResult{}
}

var HelloServiceQuestionResult_Success_DEFAULT int32
func (p *HelloServiceQuestionResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return HelloServiceQuestionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *HelloServiceQuestionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HelloServiceQuestionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HelloServiceQuestionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *HelloServiceQuestionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HelloServiceQuestionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HelloServiceQuestionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HelloServiceQuestionResult(%+v)", *p)
}

type HelloServiceAnswerArgs struct {
}

func NewHelloServiceAnswerArgs() *HelloServiceAnswerArgs {
  return &HelloServiceAnswerArgs{}
}

func (p *HelloServiceAnswerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HelloServiceAnswerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("answer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HelloServiceAnswerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HelloServiceAnswerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HelloServiceAnswerResult struct {
  Success *ExpDomain `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHelloServiceAnswerResult() *HelloServiceAnswerResult {
  return &HelloServiceAnswerResult{}
}

var HelloServiceAnswerResult_Success_DEFAULT *ExpDomain
func (p *HelloServiceAnswerResult) GetSuccess() *ExpDomain {
  if !p.IsSetSuccess() {
    return HelloServiceAnswerResult_Success_DEFAULT
  }
return p.Success
}
func (p *HelloServiceAnswerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HelloServiceAnswerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HelloServiceAnswerResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ExpDomain{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *HelloServiceAnswerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("answer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HelloServiceAnswerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HelloServiceAnswerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HelloServiceAnswerResult(%+v)", *p)
}


