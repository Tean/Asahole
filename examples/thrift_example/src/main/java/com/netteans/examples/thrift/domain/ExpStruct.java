/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netteans.examples.thrift.domain;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-03-22")
public class ExpStruct implements org.apache.thrift.TBase<ExpStruct, ExpStruct._Fields>, java.io.Serializable, Cloneable, Comparable<ExpStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExpStruct");

  private static final org.apache.thrift.protocol.TField USERMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("usermap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField INTSET_FIELD_DESC = new org.apache.thrift.protocol.TField("intset", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField DOUBLELIST_FIELD_DESC = new org.apache.thrift.protocol.TField("doublelist", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExpStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExpStructTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,User> usermap; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> intset; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> doublelist; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USERMAP((short)1, "usermap"),
    INTSET((short)2, "intset"),
    DOUBLELIST((short)3, "doublelist");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USERMAP
          return USERMAP;
        case 2: // INTSET
          return INTSET;
        case 3: // DOUBLELIST
          return DOUBLELIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USERMAP, new org.apache.thrift.meta_data.FieldMetaData("usermap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "User"))));
    tmpMap.put(_Fields.INTSET, new org.apache.thrift.meta_data.FieldMetaData("intset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DOUBLELIST, new org.apache.thrift.meta_data.FieldMetaData("doublelist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExpStruct.class, metaDataMap);
  }

  public ExpStruct() {
  }

  public ExpStruct(
    java.util.Map<java.lang.String,User> usermap,
    java.util.Set<java.lang.Integer> intset,
    java.util.List<java.lang.Double> doublelist)
  {
    this();
    this.usermap = usermap;
    this.intset = intset;
    this.doublelist = doublelist;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExpStruct(ExpStruct other) {
    if (other.isSetUsermap()) {
      java.util.Map<java.lang.String,User> __this__usermap = new java.util.HashMap<java.lang.String,User>(other.usermap.size());
      for (java.util.Map.Entry<java.lang.String, User> other_element : other.usermap.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        User other_element_value = other_element.getValue();

        java.lang.String __this__usermap_copy_key = other_element_key;

        User __this__usermap_copy_value = new User(other_element_value);

        __this__usermap.put(__this__usermap_copy_key, __this__usermap_copy_value);
      }
      this.usermap = __this__usermap;
    }
    if (other.isSetIntset()) {
      java.util.Set<java.lang.Integer> __this__intset = new java.util.HashSet<java.lang.Integer>(other.intset);
      this.intset = __this__intset;
    }
    if (other.isSetDoublelist()) {
      java.util.List<java.lang.Double> __this__doublelist = new java.util.ArrayList<java.lang.Double>(other.doublelist);
      this.doublelist = __this__doublelist;
    }
  }

  public ExpStruct deepCopy() {
    return new ExpStruct(this);
  }

  @Override
  public void clear() {
    this.usermap = null;
    this.intset = null;
    this.doublelist = null;
  }

  public int getUsermapSize() {
    return (this.usermap == null) ? 0 : this.usermap.size();
  }

  public void putToUsermap(java.lang.String key, User val) {
    if (this.usermap == null) {
      this.usermap = new java.util.HashMap<java.lang.String,User>();
    }
    this.usermap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,User> getUsermap() {
    return this.usermap;
  }

  public ExpStruct setUsermap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,User> usermap) {
    this.usermap = usermap;
    return this;
  }

  public void unsetUsermap() {
    this.usermap = null;
  }

  /** Returns true if field usermap is set (has been assigned a value) and false otherwise */
  public boolean isSetUsermap() {
    return this.usermap != null;
  }

  public void setUsermapIsSet(boolean value) {
    if (!value) {
      this.usermap = null;
    }
  }

  public int getIntsetSize() {
    return (this.intset == null) ? 0 : this.intset.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getIntsetIterator() {
    return (this.intset == null) ? null : this.intset.iterator();
  }

  public void addToIntset(int elem) {
    if (this.intset == null) {
      this.intset = new java.util.HashSet<java.lang.Integer>();
    }
    this.intset.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.Integer> getIntset() {
    return this.intset;
  }

  public ExpStruct setIntset(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> intset) {
    this.intset = intset;
    return this;
  }

  public void unsetIntset() {
    this.intset = null;
  }

  /** Returns true if field intset is set (has been assigned a value) and false otherwise */
  public boolean isSetIntset() {
    return this.intset != null;
  }

  public void setIntsetIsSet(boolean value) {
    if (!value) {
      this.intset = null;
    }
  }

  public int getDoublelistSize() {
    return (this.doublelist == null) ? 0 : this.doublelist.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getDoublelistIterator() {
    return (this.doublelist == null) ? null : this.doublelist.iterator();
  }

  public void addToDoublelist(double elem) {
    if (this.doublelist == null) {
      this.doublelist = new java.util.ArrayList<java.lang.Double>();
    }
    this.doublelist.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getDoublelist() {
    return this.doublelist;
  }

  public ExpStruct setDoublelist(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> doublelist) {
    this.doublelist = doublelist;
    return this;
  }

  public void unsetDoublelist() {
    this.doublelist = null;
  }

  /** Returns true if field doublelist is set (has been assigned a value) and false otherwise */
  public boolean isSetDoublelist() {
    return this.doublelist != null;
  }

  public void setDoublelistIsSet(boolean value) {
    if (!value) {
      this.doublelist = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USERMAP:
      if (value == null) {
        unsetUsermap();
      } else {
        setUsermap((java.util.Map<java.lang.String,User>)value);
      }
      break;

    case INTSET:
      if (value == null) {
        unsetIntset();
      } else {
        setIntset((java.util.Set<java.lang.Integer>)value);
      }
      break;

    case DOUBLELIST:
      if (value == null) {
        unsetDoublelist();
      } else {
        setDoublelist((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USERMAP:
      return getUsermap();

    case INTSET:
      return getIntset();

    case DOUBLELIST:
      return getDoublelist();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USERMAP:
      return isSetUsermap();
    case INTSET:
      return isSetIntset();
    case DOUBLELIST:
      return isSetDoublelist();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ExpStruct)
      return this.equals((ExpStruct)that);
    return false;
  }

  public boolean equals(ExpStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_usermap = true && this.isSetUsermap();
    boolean that_present_usermap = true && that.isSetUsermap();
    if (this_present_usermap || that_present_usermap) {
      if (!(this_present_usermap && that_present_usermap))
        return false;
      if (!this.usermap.equals(that.usermap))
        return false;
    }

    boolean this_present_intset = true && this.isSetIntset();
    boolean that_present_intset = true && that.isSetIntset();
    if (this_present_intset || that_present_intset) {
      if (!(this_present_intset && that_present_intset))
        return false;
      if (!this.intset.equals(that.intset))
        return false;
    }

    boolean this_present_doublelist = true && this.isSetDoublelist();
    boolean that_present_doublelist = true && that.isSetDoublelist();
    if (this_present_doublelist || that_present_doublelist) {
      if (!(this_present_doublelist && that_present_doublelist))
        return false;
      if (!this.doublelist.equals(that.doublelist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsermap()) ? 131071 : 524287);
    if (isSetUsermap())
      hashCode = hashCode * 8191 + usermap.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntset()) ? 131071 : 524287);
    if (isSetIntset())
      hashCode = hashCode * 8191 + intset.hashCode();

    hashCode = hashCode * 8191 + ((isSetDoublelist()) ? 131071 : 524287);
    if (isSetDoublelist())
      hashCode = hashCode * 8191 + doublelist.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ExpStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsermap()).compareTo(other.isSetUsermap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsermap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usermap, other.usermap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntset()).compareTo(other.isSetIntset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intset, other.intset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDoublelist()).compareTo(other.isSetDoublelist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoublelist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doublelist, other.doublelist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExpStruct(");
    boolean first = true;

    sb.append("usermap:");
    if (this.usermap == null) {
      sb.append("null");
    } else {
      sb.append(this.usermap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intset:");
    if (this.intset == null) {
      sb.append("null");
    } else {
      sb.append(this.intset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doublelist:");
    if (this.doublelist == null) {
      sb.append("null");
    } else {
      sb.append(this.doublelist);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExpStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExpStructStandardScheme getScheme() {
      return new ExpStructStandardScheme();
    }
  }

  private static class ExpStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExpStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExpStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USERMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.usermap = new java.util.HashMap<java.lang.String,User>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable User _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = new User();
                  _val2.read(iprot);
                  struct.usermap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setUsermapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTSET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set4 = iprot.readSetBegin();
                struct.intset = new java.util.HashSet<java.lang.Integer>(2*_set4.size);
                int _elem5;
                for (int _i6 = 0; _i6 < _set4.size; ++_i6)
                {
                  _elem5 = iprot.readI32();
                  struct.intset.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setIntsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOUBLELIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.doublelist = new java.util.ArrayList<java.lang.Double>(_list7.size);
                double _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = iprot.readDouble();
                  struct.doublelist.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setDoublelistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExpStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.usermap != null) {
        oprot.writeFieldBegin(USERMAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.usermap.size()));
          for (java.util.Map.Entry<java.lang.String, User> _iter10 : struct.usermap.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            _iter10.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intset != null) {
        oprot.writeFieldBegin(INTSET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.intset.size()));
          for (int _iter11 : struct.intset)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.doublelist != null) {
        oprot.writeFieldBegin(DOUBLELIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.doublelist.size()));
          for (double _iter12 : struct.doublelist)
          {
            oprot.writeDouble(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExpStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExpStructTupleScheme getScheme() {
      return new ExpStructTupleScheme();
    }
  }

  private static class ExpStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExpStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExpStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsermap()) {
        optionals.set(0);
      }
      if (struct.isSetIntset()) {
        optionals.set(1);
      }
      if (struct.isSetDoublelist()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUsermap()) {
        {
          oprot.writeI32(struct.usermap.size());
          for (java.util.Map.Entry<java.lang.String, User> _iter13 : struct.usermap.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            _iter13.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetIntset()) {
        {
          oprot.writeI32(struct.intset.size());
          for (int _iter14 : struct.intset)
          {
            oprot.writeI32(_iter14);
          }
        }
      }
      if (struct.isSetDoublelist()) {
        {
          oprot.writeI32(struct.doublelist.size());
          for (double _iter15 : struct.doublelist)
          {
            oprot.writeDouble(_iter15);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExpStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.usermap = new java.util.HashMap<java.lang.String,User>(2*_map16.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key17;
          @org.apache.thrift.annotation.Nullable User _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            _val18 = new User();
            _val18.read(iprot);
            struct.usermap.put(_key17, _val18);
          }
        }
        struct.setUsermapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set20 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intset = new java.util.HashSet<java.lang.Integer>(2*_set20.size);
          int _elem21;
          for (int _i22 = 0; _i22 < _set20.size; ++_i22)
          {
            _elem21 = iprot.readI32();
            struct.intset.add(_elem21);
          }
        }
        struct.setIntsetIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.doublelist = new java.util.ArrayList<java.lang.Double>(_list23.size);
          double _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readDouble();
            struct.doublelist.add(_elem24);
          }
        }
        struct.setDoublelistIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

