/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netteans.examples.thrift.domain;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-03-22")
public class ExpDomain implements org.apache.thrift.TBase<ExpDomain, ExpDomain._Fields>, java.io.Serializable, Cloneable, Comparable<ExpDomain> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExpDomain");

  private static final org.apache.thrift.protocol.TField DOMAIN_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("domainBool", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField DOMAIN_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("domainByte", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField DOMAIN_I16_FIELD_DESC = new org.apache.thrift.protocol.TField("domainI16", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField DOMAIN_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("domainI32", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DOMAIN_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("domainI64", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DOMAIN_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("domainDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DOMAIN_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("domainString", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DOMAIN_BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("domainBinary", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DOMAIN_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("domainStruct", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExpDomainStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExpDomainTupleSchemeFactory();

  public boolean domainBool; // optional
  public byte domainByte; // required
  public short domainI16; // optional
  public int domainI32; // optional
  public long domainI64; // optional
  public double domainDouble; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String domainString; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer domainBinary; // optional
  public @org.apache.thrift.annotation.Nullable ExpStruct domainStruct; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOMAIN_BOOL((short)1, "domainBool"),
    DOMAIN_BYTE((short)2, "domainByte"),
    DOMAIN_I16((short)3, "domainI16"),
    DOMAIN_I32((short)4, "domainI32"),
    DOMAIN_I64((short)5, "domainI64"),
    DOMAIN_DOUBLE((short)6, "domainDouble"),
    DOMAIN_STRING((short)7, "domainString"),
    DOMAIN_BINARY((short)8, "domainBinary"),
    DOMAIN_STRUCT((short)9, "domainStruct");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOMAIN_BOOL
          return DOMAIN_BOOL;
        case 2: // DOMAIN_BYTE
          return DOMAIN_BYTE;
        case 3: // DOMAIN_I16
          return DOMAIN_I16;
        case 4: // DOMAIN_I32
          return DOMAIN_I32;
        case 5: // DOMAIN_I64
          return DOMAIN_I64;
        case 6: // DOMAIN_DOUBLE
          return DOMAIN_DOUBLE;
        case 7: // DOMAIN_STRING
          return DOMAIN_STRING;
        case 8: // DOMAIN_BINARY
          return DOMAIN_BINARY;
        case 9: // DOMAIN_STRUCT
          return DOMAIN_STRUCT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DOMAINBOOL_ISSET_ID = 0;
  private static final int __DOMAINBYTE_ISSET_ID = 1;
  private static final int __DOMAINI16_ISSET_ID = 2;
  private static final int __DOMAINI32_ISSET_ID = 3;
  private static final int __DOMAINI64_ISSET_ID = 4;
  private static final int __DOMAINDOUBLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DOMAIN_BOOL,_Fields.DOMAIN_I16,_Fields.DOMAIN_I32,_Fields.DOMAIN_I64,_Fields.DOMAIN_DOUBLE,_Fields.DOMAIN_STRING,_Fields.DOMAIN_BINARY,_Fields.DOMAIN_STRUCT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOMAIN_BOOL, new org.apache.thrift.meta_data.FieldMetaData("domainBool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DOMAIN_BYTE, new org.apache.thrift.meta_data.FieldMetaData("domainByte", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DOMAIN_I16, new org.apache.thrift.meta_data.FieldMetaData("domainI16", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DOMAIN_I32, new org.apache.thrift.meta_data.FieldMetaData("domainI32", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOMAIN_I64, new org.apache.thrift.meta_data.FieldMetaData("domainI64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOMAIN_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("domainDouble", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DOMAIN_STRING, new org.apache.thrift.meta_data.FieldMetaData("domainString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOMAIN_BINARY, new org.apache.thrift.meta_data.FieldMetaData("domainBinary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DOMAIN_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("domainStruct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ExpStruct")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExpDomain.class, metaDataMap);
  }

  public ExpDomain() {
  }

  public ExpDomain(
    byte domainByte)
  {
    this();
    this.domainByte = domainByte;
    setDomainByteIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExpDomain(ExpDomain other) {
    __isset_bitfield = other.__isset_bitfield;
    this.domainBool = other.domainBool;
    this.domainByte = other.domainByte;
    this.domainI16 = other.domainI16;
    this.domainI32 = other.domainI32;
    this.domainI64 = other.domainI64;
    this.domainDouble = other.domainDouble;
    if (other.isSetDomainString()) {
      this.domainString = other.domainString;
    }
    if (other.isSetDomainBinary()) {
      this.domainBinary = org.apache.thrift.TBaseHelper.copyBinary(other.domainBinary);
    }
    if (other.isSetDomainStruct()) {
      this.domainStruct = new ExpStruct(other.domainStruct);
    }
  }

  public ExpDomain deepCopy() {
    return new ExpDomain(this);
  }

  @Override
  public void clear() {
    setDomainBoolIsSet(false);
    this.domainBool = false;
    setDomainByteIsSet(false);
    this.domainByte = 0;
    setDomainI16IsSet(false);
    this.domainI16 = 0;
    setDomainI32IsSet(false);
    this.domainI32 = 0;
    setDomainI64IsSet(false);
    this.domainI64 = 0;
    setDomainDoubleIsSet(false);
    this.domainDouble = 0.0;
    this.domainString = null;
    this.domainBinary = null;
    this.domainStruct = null;
  }

  public boolean isDomainBool() {
    return this.domainBool;
  }

  public ExpDomain setDomainBool(boolean domainBool) {
    this.domainBool = domainBool;
    setDomainBoolIsSet(true);
    return this;
  }

  public void unsetDomainBool() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOMAINBOOL_ISSET_ID);
  }

  /** Returns true if field domainBool is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainBool() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOMAINBOOL_ISSET_ID);
  }

  public void setDomainBoolIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOMAINBOOL_ISSET_ID, value);
  }

  public byte getDomainByte() {
    return this.domainByte;
  }

  public ExpDomain setDomainByte(byte domainByte) {
    this.domainByte = domainByte;
    setDomainByteIsSet(true);
    return this;
  }

  public void unsetDomainByte() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOMAINBYTE_ISSET_ID);
  }

  /** Returns true if field domainByte is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainByte() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOMAINBYTE_ISSET_ID);
  }

  public void setDomainByteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOMAINBYTE_ISSET_ID, value);
  }

  public short getDomainI16() {
    return this.domainI16;
  }

  public ExpDomain setDomainI16(short domainI16) {
    this.domainI16 = domainI16;
    setDomainI16IsSet(true);
    return this;
  }

  public void unsetDomainI16() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOMAINI16_ISSET_ID);
  }

  /** Returns true if field domainI16 is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainI16() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOMAINI16_ISSET_ID);
  }

  public void setDomainI16IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOMAINI16_ISSET_ID, value);
  }

  public int getDomainI32() {
    return this.domainI32;
  }

  public ExpDomain setDomainI32(int domainI32) {
    this.domainI32 = domainI32;
    setDomainI32IsSet(true);
    return this;
  }

  public void unsetDomainI32() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOMAINI32_ISSET_ID);
  }

  /** Returns true if field domainI32 is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainI32() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOMAINI32_ISSET_ID);
  }

  public void setDomainI32IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOMAINI32_ISSET_ID, value);
  }

  public long getDomainI64() {
    return this.domainI64;
  }

  public ExpDomain setDomainI64(long domainI64) {
    this.domainI64 = domainI64;
    setDomainI64IsSet(true);
    return this;
  }

  public void unsetDomainI64() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOMAINI64_ISSET_ID);
  }

  /** Returns true if field domainI64 is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainI64() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOMAINI64_ISSET_ID);
  }

  public void setDomainI64IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOMAINI64_ISSET_ID, value);
  }

  public double getDomainDouble() {
    return this.domainDouble;
  }

  public ExpDomain setDomainDouble(double domainDouble) {
    this.domainDouble = domainDouble;
    setDomainDoubleIsSet(true);
    return this;
  }

  public void unsetDomainDouble() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOMAINDOUBLE_ISSET_ID);
  }

  /** Returns true if field domainDouble is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainDouble() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOMAINDOUBLE_ISSET_ID);
  }

  public void setDomainDoubleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOMAINDOUBLE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDomainString() {
    return this.domainString;
  }

  public ExpDomain setDomainString(@org.apache.thrift.annotation.Nullable java.lang.String domainString) {
    this.domainString = domainString;
    return this;
  }

  public void unsetDomainString() {
    this.domainString = null;
  }

  /** Returns true if field domainString is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainString() {
    return this.domainString != null;
  }

  public void setDomainStringIsSet(boolean value) {
    if (!value) {
      this.domainString = null;
    }
  }

  public byte[] getDomainBinary() {
    setDomainBinary(org.apache.thrift.TBaseHelper.rightSize(domainBinary));
    return domainBinary == null ? null : domainBinary.array();
  }

  public java.nio.ByteBuffer bufferForDomainBinary() {
    return org.apache.thrift.TBaseHelper.copyBinary(domainBinary);
  }

  public ExpDomain setDomainBinary(byte[] domainBinary) {
    this.domainBinary = domainBinary == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(domainBinary.clone());
    return this;
  }

  public ExpDomain setDomainBinary(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer domainBinary) {
    this.domainBinary = org.apache.thrift.TBaseHelper.copyBinary(domainBinary);
    return this;
  }

  public void unsetDomainBinary() {
    this.domainBinary = null;
  }

  /** Returns true if field domainBinary is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainBinary() {
    return this.domainBinary != null;
  }

  public void setDomainBinaryIsSet(boolean value) {
    if (!value) {
      this.domainBinary = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ExpStruct getDomainStruct() {
    return this.domainStruct;
  }

  public ExpDomain setDomainStruct(@org.apache.thrift.annotation.Nullable ExpStruct domainStruct) {
    this.domainStruct = domainStruct;
    return this;
  }

  public void unsetDomainStruct() {
    this.domainStruct = null;
  }

  /** Returns true if field domainStruct is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainStruct() {
    return this.domainStruct != null;
  }

  public void setDomainStructIsSet(boolean value) {
    if (!value) {
      this.domainStruct = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DOMAIN_BOOL:
      if (value == null) {
        unsetDomainBool();
      } else {
        setDomainBool((java.lang.Boolean)value);
      }
      break;

    case DOMAIN_BYTE:
      if (value == null) {
        unsetDomainByte();
      } else {
        setDomainByte((java.lang.Byte)value);
      }
      break;

    case DOMAIN_I16:
      if (value == null) {
        unsetDomainI16();
      } else {
        setDomainI16((java.lang.Short)value);
      }
      break;

    case DOMAIN_I32:
      if (value == null) {
        unsetDomainI32();
      } else {
        setDomainI32((java.lang.Integer)value);
      }
      break;

    case DOMAIN_I64:
      if (value == null) {
        unsetDomainI64();
      } else {
        setDomainI64((java.lang.Long)value);
      }
      break;

    case DOMAIN_DOUBLE:
      if (value == null) {
        unsetDomainDouble();
      } else {
        setDomainDouble((java.lang.Double)value);
      }
      break;

    case DOMAIN_STRING:
      if (value == null) {
        unsetDomainString();
      } else {
        setDomainString((java.lang.String)value);
      }
      break;

    case DOMAIN_BINARY:
      if (value == null) {
        unsetDomainBinary();
      } else {
        if (value instanceof byte[]) {
          setDomainBinary((byte[])value);
        } else {
          setDomainBinary((java.nio.ByteBuffer)value);
        }
      }
      break;

    case DOMAIN_STRUCT:
      if (value == null) {
        unsetDomainStruct();
      } else {
        setDomainStruct((ExpStruct)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DOMAIN_BOOL:
      return isDomainBool();

    case DOMAIN_BYTE:
      return getDomainByte();

    case DOMAIN_I16:
      return getDomainI16();

    case DOMAIN_I32:
      return getDomainI32();

    case DOMAIN_I64:
      return getDomainI64();

    case DOMAIN_DOUBLE:
      return getDomainDouble();

    case DOMAIN_STRING:
      return getDomainString();

    case DOMAIN_BINARY:
      return getDomainBinary();

    case DOMAIN_STRUCT:
      return getDomainStruct();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DOMAIN_BOOL:
      return isSetDomainBool();
    case DOMAIN_BYTE:
      return isSetDomainByte();
    case DOMAIN_I16:
      return isSetDomainI16();
    case DOMAIN_I32:
      return isSetDomainI32();
    case DOMAIN_I64:
      return isSetDomainI64();
    case DOMAIN_DOUBLE:
      return isSetDomainDouble();
    case DOMAIN_STRING:
      return isSetDomainString();
    case DOMAIN_BINARY:
      return isSetDomainBinary();
    case DOMAIN_STRUCT:
      return isSetDomainStruct();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ExpDomain)
      return this.equals((ExpDomain)that);
    return false;
  }

  public boolean equals(ExpDomain that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_domainBool = true && this.isSetDomainBool();
    boolean that_present_domainBool = true && that.isSetDomainBool();
    if (this_present_domainBool || that_present_domainBool) {
      if (!(this_present_domainBool && that_present_domainBool))
        return false;
      if (this.domainBool != that.domainBool)
        return false;
    }

    boolean this_present_domainByte = true;
    boolean that_present_domainByte = true;
    if (this_present_domainByte || that_present_domainByte) {
      if (!(this_present_domainByte && that_present_domainByte))
        return false;
      if (this.domainByte != that.domainByte)
        return false;
    }

    boolean this_present_domainI16 = true && this.isSetDomainI16();
    boolean that_present_domainI16 = true && that.isSetDomainI16();
    if (this_present_domainI16 || that_present_domainI16) {
      if (!(this_present_domainI16 && that_present_domainI16))
        return false;
      if (this.domainI16 != that.domainI16)
        return false;
    }

    boolean this_present_domainI32 = true && this.isSetDomainI32();
    boolean that_present_domainI32 = true && that.isSetDomainI32();
    if (this_present_domainI32 || that_present_domainI32) {
      if (!(this_present_domainI32 && that_present_domainI32))
        return false;
      if (this.domainI32 != that.domainI32)
        return false;
    }

    boolean this_present_domainI64 = true && this.isSetDomainI64();
    boolean that_present_domainI64 = true && that.isSetDomainI64();
    if (this_present_domainI64 || that_present_domainI64) {
      if (!(this_present_domainI64 && that_present_domainI64))
        return false;
      if (this.domainI64 != that.domainI64)
        return false;
    }

    boolean this_present_domainDouble = true && this.isSetDomainDouble();
    boolean that_present_domainDouble = true && that.isSetDomainDouble();
    if (this_present_domainDouble || that_present_domainDouble) {
      if (!(this_present_domainDouble && that_present_domainDouble))
        return false;
      if (this.domainDouble != that.domainDouble)
        return false;
    }

    boolean this_present_domainString = true && this.isSetDomainString();
    boolean that_present_domainString = true && that.isSetDomainString();
    if (this_present_domainString || that_present_domainString) {
      if (!(this_present_domainString && that_present_domainString))
        return false;
      if (!this.domainString.equals(that.domainString))
        return false;
    }

    boolean this_present_domainBinary = true && this.isSetDomainBinary();
    boolean that_present_domainBinary = true && that.isSetDomainBinary();
    if (this_present_domainBinary || that_present_domainBinary) {
      if (!(this_present_domainBinary && that_present_domainBinary))
        return false;
      if (!this.domainBinary.equals(that.domainBinary))
        return false;
    }

    boolean this_present_domainStruct = true && this.isSetDomainStruct();
    boolean that_present_domainStruct = true && that.isSetDomainStruct();
    if (this_present_domainStruct || that_present_domainStruct) {
      if (!(this_present_domainStruct && that_present_domainStruct))
        return false;
      if (!this.domainStruct.equals(that.domainStruct))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDomainBool()) ? 131071 : 524287);
    if (isSetDomainBool())
      hashCode = hashCode * 8191 + ((domainBool) ? 131071 : 524287);

    hashCode = hashCode * 8191 + (int) (domainByte);

    hashCode = hashCode * 8191 + ((isSetDomainI16()) ? 131071 : 524287);
    if (isSetDomainI16())
      hashCode = hashCode * 8191 + domainI16;

    hashCode = hashCode * 8191 + ((isSetDomainI32()) ? 131071 : 524287);
    if (isSetDomainI32())
      hashCode = hashCode * 8191 + domainI32;

    hashCode = hashCode * 8191 + ((isSetDomainI64()) ? 131071 : 524287);
    if (isSetDomainI64())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(domainI64);

    hashCode = hashCode * 8191 + ((isSetDomainDouble()) ? 131071 : 524287);
    if (isSetDomainDouble())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(domainDouble);

    hashCode = hashCode * 8191 + ((isSetDomainString()) ? 131071 : 524287);
    if (isSetDomainString())
      hashCode = hashCode * 8191 + domainString.hashCode();

    hashCode = hashCode * 8191 + ((isSetDomainBinary()) ? 131071 : 524287);
    if (isSetDomainBinary())
      hashCode = hashCode * 8191 + domainBinary.hashCode();

    hashCode = hashCode * 8191 + ((isSetDomainStruct()) ? 131071 : 524287);
    if (isSetDomainStruct())
      hashCode = hashCode * 8191 + domainStruct.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ExpDomain other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDomainBool()).compareTo(other.isSetDomainBool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainBool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainBool, other.domainBool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainByte()).compareTo(other.isSetDomainByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainByte, other.domainByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainI16()).compareTo(other.isSetDomainI16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainI16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainI16, other.domainI16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainI32()).compareTo(other.isSetDomainI32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainI32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainI32, other.domainI32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainI64()).compareTo(other.isSetDomainI64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainI64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainI64, other.domainI64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainDouble()).compareTo(other.isSetDomainDouble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainDouble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainDouble, other.domainDouble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainString()).compareTo(other.isSetDomainString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainString, other.domainString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainBinary()).compareTo(other.isSetDomainBinary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainBinary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainBinary, other.domainBinary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainStruct()).compareTo(other.isSetDomainStruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainStruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainStruct, other.domainStruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExpDomain(");
    boolean first = true;

    if (isSetDomainBool()) {
      sb.append("domainBool:");
      sb.append(this.domainBool);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("domainByte:");
    sb.append(this.domainByte);
    first = false;
    if (isSetDomainI16()) {
      if (!first) sb.append(", ");
      sb.append("domainI16:");
      sb.append(this.domainI16);
      first = false;
    }
    if (isSetDomainI32()) {
      if (!first) sb.append(", ");
      sb.append("domainI32:");
      sb.append(this.domainI32);
      first = false;
    }
    if (isSetDomainI64()) {
      if (!first) sb.append(", ");
      sb.append("domainI64:");
      sb.append(this.domainI64);
      first = false;
    }
    if (isSetDomainDouble()) {
      if (!first) sb.append(", ");
      sb.append("domainDouble:");
      sb.append(this.domainDouble);
      first = false;
    }
    if (isSetDomainString()) {
      if (!first) sb.append(", ");
      sb.append("domainString:");
      if (this.domainString == null) {
        sb.append("null");
      } else {
        sb.append(this.domainString);
      }
      first = false;
    }
    if (isSetDomainBinary()) {
      if (!first) sb.append(", ");
      sb.append("domainBinary:");
      if (this.domainBinary == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.domainBinary, sb);
      }
      first = false;
    }
    if (isSetDomainStruct()) {
      if (!first) sb.append(", ");
      sb.append("domainStruct:");
      if (this.domainStruct == null) {
        sb.append("null");
      } else {
        sb.append(this.domainStruct);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'domainByte' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExpDomainStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExpDomainStandardScheme getScheme() {
      return new ExpDomainStandardScheme();
    }
  }

  private static class ExpDomainStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExpDomain> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExpDomain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOMAIN_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.domainBool = iprot.readBool();
              struct.setDomainBoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOMAIN_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.domainByte = iprot.readByte();
              struct.setDomainByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOMAIN_I16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.domainI16 = iprot.readI16();
              struct.setDomainI16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOMAIN_I32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.domainI32 = iprot.readI32();
              struct.setDomainI32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOMAIN_I64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.domainI64 = iprot.readI64();
              struct.setDomainI64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOMAIN_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.domainDouble = iprot.readDouble();
              struct.setDomainDoubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOMAIN_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domainString = iprot.readString();
              struct.setDomainStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOMAIN_BINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domainBinary = iprot.readBinary();
              struct.setDomainBinaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DOMAIN_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.domainStruct = new ExpStruct();
              struct.domainStruct.read(iprot);
              struct.setDomainStructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDomainByte()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'domainByte' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExpDomain struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDomainBool()) {
        oprot.writeFieldBegin(DOMAIN_BOOL_FIELD_DESC);
        oprot.writeBool(struct.domainBool);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DOMAIN_BYTE_FIELD_DESC);
      oprot.writeByte(struct.domainByte);
      oprot.writeFieldEnd();
      if (struct.isSetDomainI16()) {
        oprot.writeFieldBegin(DOMAIN_I16_FIELD_DESC);
        oprot.writeI16(struct.domainI16);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDomainI32()) {
        oprot.writeFieldBegin(DOMAIN_I32_FIELD_DESC);
        oprot.writeI32(struct.domainI32);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDomainI64()) {
        oprot.writeFieldBegin(DOMAIN_I64_FIELD_DESC);
        oprot.writeI64(struct.domainI64);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDomainDouble()) {
        oprot.writeFieldBegin(DOMAIN_DOUBLE_FIELD_DESC);
        oprot.writeDouble(struct.domainDouble);
        oprot.writeFieldEnd();
      }
      if (struct.domainString != null) {
        if (struct.isSetDomainString()) {
          oprot.writeFieldBegin(DOMAIN_STRING_FIELD_DESC);
          oprot.writeString(struct.domainString);
          oprot.writeFieldEnd();
        }
      }
      if (struct.domainBinary != null) {
        if (struct.isSetDomainBinary()) {
          oprot.writeFieldBegin(DOMAIN_BINARY_FIELD_DESC);
          oprot.writeBinary(struct.domainBinary);
          oprot.writeFieldEnd();
        }
      }
      if (struct.domainStruct != null) {
        if (struct.isSetDomainStruct()) {
          oprot.writeFieldBegin(DOMAIN_STRUCT_FIELD_DESC);
          struct.domainStruct.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExpDomainTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExpDomainTupleScheme getScheme() {
      return new ExpDomainTupleScheme();
    }
  }

  private static class ExpDomainTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExpDomain> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExpDomain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeByte(struct.domainByte);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDomainBool()) {
        optionals.set(0);
      }
      if (struct.isSetDomainI16()) {
        optionals.set(1);
      }
      if (struct.isSetDomainI32()) {
        optionals.set(2);
      }
      if (struct.isSetDomainI64()) {
        optionals.set(3);
      }
      if (struct.isSetDomainDouble()) {
        optionals.set(4);
      }
      if (struct.isSetDomainString()) {
        optionals.set(5);
      }
      if (struct.isSetDomainBinary()) {
        optionals.set(6);
      }
      if (struct.isSetDomainStruct()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetDomainBool()) {
        oprot.writeBool(struct.domainBool);
      }
      if (struct.isSetDomainI16()) {
        oprot.writeI16(struct.domainI16);
      }
      if (struct.isSetDomainI32()) {
        oprot.writeI32(struct.domainI32);
      }
      if (struct.isSetDomainI64()) {
        oprot.writeI64(struct.domainI64);
      }
      if (struct.isSetDomainDouble()) {
        oprot.writeDouble(struct.domainDouble);
      }
      if (struct.isSetDomainString()) {
        oprot.writeString(struct.domainString);
      }
      if (struct.isSetDomainBinary()) {
        oprot.writeBinary(struct.domainBinary);
      }
      if (struct.isSetDomainStruct()) {
        struct.domainStruct.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExpDomain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.domainByte = iprot.readByte();
      struct.setDomainByteIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.domainBool = iprot.readBool();
        struct.setDomainBoolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.domainI16 = iprot.readI16();
        struct.setDomainI16IsSet(true);
      }
      if (incoming.get(2)) {
        struct.domainI32 = iprot.readI32();
        struct.setDomainI32IsSet(true);
      }
      if (incoming.get(3)) {
        struct.domainI64 = iprot.readI64();
        struct.setDomainI64IsSet(true);
      }
      if (incoming.get(4)) {
        struct.domainDouble = iprot.readDouble();
        struct.setDomainDoubleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.domainString = iprot.readString();
        struct.setDomainStringIsSet(true);
      }
      if (incoming.get(6)) {
        struct.domainBinary = iprot.readBinary();
        struct.setDomainBinaryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.domainStruct = new ExpStruct();
        struct.domainStruct.read(iprot);
        struct.setDomainStructIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

